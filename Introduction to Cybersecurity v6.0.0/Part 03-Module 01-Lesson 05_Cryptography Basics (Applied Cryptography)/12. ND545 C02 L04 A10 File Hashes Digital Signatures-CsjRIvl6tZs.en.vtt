WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.925
Let's move on to the final section of this lesson,

00:00:02.925 --> 00:00:06.150
file hashes and digital signatures. Let's dig in.

00:00:06.150 --> 00:00:08.070
By the end of this section,

00:00:08.070 --> 00:00:10.185
you'll understand what file hashes are,

00:00:10.185 --> 00:00:12.645
understand what digital signatures are,

00:00:12.645 --> 00:00:16.140
and determine the integrity and authenticity of a file,

00:00:16.140 --> 00:00:19.050
where the file hashes fit in our three component model of

00:00:19.050 --> 00:00:22.305
security, prevention and detection.

00:00:22.305 --> 00:00:24.105
What is a hash?

00:00:24.105 --> 00:00:29.175
In layman's terms, a file hash is a digital fingerprint that verifies a file,

00:00:29.175 --> 00:00:30.510
is what it says it is,

00:00:30.510 --> 00:00:32.055
and has not been changed.

00:00:32.055 --> 00:00:35.130
A file is made up of blocks of data.

00:00:35.130 --> 00:00:40.050
Hashing transforms it into a far shorter length that represents the original string.

00:00:40.050 --> 00:00:45.770
Hashing is an algorithm that calculates a fixed size bit string value from a file.

00:00:45.770 --> 00:00:49.385
A hash is usually represented in hexadecimal form.

00:00:49.385 --> 00:00:51.830
It is important to note that a hash is not

00:00:51.830 --> 00:00:54.980
encryption and that there is no decrypting of a file hash.

00:00:54.980 --> 00:00:56.845
It is a one-way process.

00:00:56.845 --> 00:00:59.825
Let's take a look at some examples of file hashes.

00:00:59.825 --> 00:01:01.970
First up, MD5.

00:01:01.970 --> 00:01:07.085
Message digest Algorithm 5 is a cryptographic hash function.

00:01:07.085 --> 00:01:09.815
It has a 128-bit value.

00:01:09.815 --> 00:01:13.900
It is typically expressed as a 32 digit hexadecimal.

00:01:13.900 --> 00:01:16.670
How does it work? The message to be hashed is

00:01:16.670 --> 00:01:19.760
modified to meet a specific mathematical size.

00:01:19.760 --> 00:01:21.260
This is called padding.

00:01:21.260 --> 00:01:25.375
It is then broken into four word lengths of 32 bits.

00:01:25.375 --> 00:01:28.505
MD5 performs four rounds of this action.

00:01:28.505 --> 00:01:30.590
If it detects a single change,

00:01:30.590 --> 00:01:32.455
the entire hash will be different.

00:01:32.455 --> 00:01:35.840
MD5 has proven to be slightly prone to collisions,

00:01:35.840 --> 00:01:39.230
which means theoretically a duplicate hash could be created.

00:01:39.230 --> 00:01:42.010
For that reason, it has been retired.

00:01:42.010 --> 00:01:44.465
Our final example of file hashes is,

00:01:44.465 --> 00:01:47.225
Secure Hashing Algorithm Version 2.

00:01:47.225 --> 00:01:49.760
It was designed to replace Version 1.

00:01:49.760 --> 00:01:51.830
When you think SHA256,

00:01:51.830 --> 00:01:54.000
this is it. How does it work?

00:01:54.000 --> 00:01:56.450
Pretty much all hash algorithms begin with

00:01:56.450 --> 00:01:59.750
padding to set a standard length with which to operate.

00:01:59.750 --> 00:02:03.935
Then the data is broken into blocks of 512 bits.

00:02:03.935 --> 00:02:07.340
At this point, the hash algorithm is applied using

00:02:07.340 --> 00:02:10.310
a complex mathematical formula that multiplies portions

00:02:10.310 --> 00:02:13.645
of the bits with prime numbers and then a shuffling of the data.

00:02:13.645 --> 00:02:18.335
Lastly, we have the output of 64 hexadecimal digits.

00:02:18.335 --> 00:02:21.290
We'll close this lesson out with digital signatures.

00:02:21.290 --> 00:02:23.870
Digital signatures are used for authenticity.

00:02:23.870 --> 00:02:27.055
The person or site are who they say they are.

00:02:27.055 --> 00:02:28.965
They use hashing algorithms,

00:02:28.965 --> 00:02:30.405
like what we just learned about.

00:02:30.405 --> 00:02:32.750
At this point they are signed using

00:02:32.750 --> 00:02:36.125
the public key infrastructure we learned about in a previous section.

00:02:36.125 --> 00:02:40.315
The hash is combined with the sender's private key and is sent to the recipient.

00:02:40.315 --> 00:02:44.880
At this point, the signature is validated by using the public key.

