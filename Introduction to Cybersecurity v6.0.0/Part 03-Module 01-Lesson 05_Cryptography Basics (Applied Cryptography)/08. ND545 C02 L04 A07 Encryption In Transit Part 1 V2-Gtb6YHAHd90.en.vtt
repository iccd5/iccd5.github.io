WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.820
Let's move to encryption in transit.

00:00:02.820 --> 00:00:04.770
By the end of this section,

00:00:04.770 --> 00:00:09.555
you will understand the difference between data at rest and data in transit.

00:00:09.555 --> 00:00:12.570
You'll learn the different types of encryption techniques for data in

00:00:12.570 --> 00:00:17.355
transit and determine the appropriate encryption type for a given scenario.

00:00:17.355 --> 00:00:22.695
Where does the encrypting data in transit fit in our three-component model of security?

00:00:22.695 --> 00:00:26.355
Prevention. What is encryption in transit?

00:00:26.355 --> 00:00:29.100
It is the application of cryptography to

00:00:29.100 --> 00:00:32.650
protect data that is moving from one location to another.

00:00:32.650 --> 00:00:35.030
There are a couple of different ways to achieve this.

00:00:35.030 --> 00:00:38.494
First is to encrypt the data before sending, for instance,

00:00:38.494 --> 00:00:43.015
encrypt the document, that email or FTP it to someone outside of your organization.

00:00:43.015 --> 00:00:47.945
But for this section, we're going to focus on encrypting the data while it's in motion.

00:00:47.945 --> 00:00:52.115
Let's take a look at what makes up data at rest and data in transit.

00:00:52.115 --> 00:00:54.260
First up, data at rest.

00:00:54.260 --> 00:00:57.230
Data at rest is data that is not actively

00:00:57.230 --> 00:01:00.470
moving from device to device or network to network,

00:01:00.470 --> 00:01:03.080
such as data stored on a hard drive,

00:01:03.080 --> 00:01:05.435
server chair, or a flash drive.

00:01:05.435 --> 00:01:09.825
This data would be encrypted using methods like BitLocker or 7-Zip.

00:01:09.825 --> 00:01:15.110
It is thought to be more secure as it is not traversing from one location to another.

00:01:15.110 --> 00:01:18.230
However, it generally relies on the security of

00:01:18.230 --> 00:01:22.225
the system it resides on depending on which encryption method is being used.

00:01:22.225 --> 00:01:24.095
Being in a static location,

00:01:24.095 --> 00:01:27.640
it is subject to long-term attacks such as brute-force.

00:01:27.640 --> 00:01:30.005
Now, let's take a look at data in transit.

00:01:30.005 --> 00:01:33.020
Data in transit or data in motion is

00:01:33.020 --> 00:01:36.065
data that is actively moving from one location to another,

00:01:36.065 --> 00:01:38.930
such as across the Internet or through a private network.

00:01:38.930 --> 00:01:40.715
When data is in transit,

00:01:40.715 --> 00:01:42.920
it is susceptible to eavesdropping or man in

00:01:42.920 --> 00:01:45.730
the middle attacks thus the requirement for encryption.

00:01:45.730 --> 00:01:48.320
Data in transit across public connection

00:01:48.320 --> 00:01:51.950
generally uses asymmetric encryption with a certificate authority.

00:01:51.950 --> 00:01:54.575
If the data is traversing a private line,

00:01:54.575 --> 00:01:56.180
it will likely use symmetric.

00:01:56.180 --> 00:01:58.295
Although as we learned just a few moments ago,

00:01:58.295 --> 00:02:00.955
it is not uncommon to use a combination of both.

00:02:00.955 --> 00:02:02.390
Now, we're going to learn some of

00:02:02.390 --> 00:02:05.200
the most common techniques for encrypting data in transit.

00:02:05.200 --> 00:02:10.050
We'll look at HTTPS with TLS, then SSH,

00:02:10.050 --> 00:02:13.665
followed by SFTP and FTPS,

00:02:13.665 --> 00:02:15.630
and close it out with RDP.

00:02:15.630 --> 00:02:19.685
Let's dig in. Up first is HTTPS.

00:02:19.685 --> 00:02:23.269
HTTP is Hypertext Transport Protocol,

00:02:23.269 --> 00:02:27.305
which is the protocol that allows your browser to communicate with web servers.

00:02:27.305 --> 00:02:29.430
The S stands for secure.

00:02:29.430 --> 00:02:32.045
In order to change HTTP,

00:02:32.045 --> 00:02:33.260
which uses clear text,

00:02:33.260 --> 00:02:35.795
to HTTPS, which uses ciphertext,

00:02:35.795 --> 00:02:38.795
we add SSL or TLS.

00:02:38.795 --> 00:02:44.630
SSL is secure socket layer which around 2000 was effectively renamed TLS,

00:02:44.630 --> 00:02:47.345
which stands for Transport Layer Security.

00:02:47.345 --> 00:02:50.660
You are likely running either TLS version 1.2 or

00:02:50.660 --> 00:02:54.340
1.3 depending on which browser. How does it work?

00:02:54.340 --> 00:02:57.515
When your browser reaches out to an HTTPS site,

00:02:57.515 --> 00:02:59.750
it is using asymmetric cryptography.

00:02:59.750 --> 00:03:02.254
It checks to make sure that digital certificate,

00:03:02.254 --> 00:03:03.350
which we learned about earlier,

00:03:03.350 --> 00:03:06.445
is authentic and issued by a certificate authority.

00:03:06.445 --> 00:03:09.810
At that point, the rest of the TLS handshake occurs.

00:03:09.810 --> 00:03:11.520
More on that in just a moment.

00:03:11.520 --> 00:03:14.270
Now, asymmetric cryptographic session has

00:03:14.270 --> 00:03:18.400
begun allowing for the fast communications we expect from the Internet.

00:03:18.400 --> 00:03:21.050
The TLS handshake we just mentioned is the method

00:03:21.050 --> 00:03:24.350
our traffic becomes fully encrypted when communicating with web servers.

00:03:24.350 --> 00:03:26.625
The steps are, the client,

00:03:26.625 --> 00:03:30.360
in this case, your Internet browser reaches out with a "Hello".

00:03:30.360 --> 00:03:33.800
It includes the SSL, TLS version number,

00:03:33.800 --> 00:03:37.850
the cipher suite, which is what algorithms are being used,

00:03:37.850 --> 00:03:39.555
and a random string.

00:03:39.555 --> 00:03:41.965
The server responds with its own "Hello",

00:03:41.965 --> 00:03:44.390
which includes roughly the same information,

00:03:44.390 --> 00:03:47.179
but also includes the digital certificate.

00:03:47.179 --> 00:03:50.150
Your browser authenticates the certificate with

00:03:50.150 --> 00:03:55.045
a trusted CA and encrypts the traffic using the server's public key.

00:03:55.045 --> 00:03:58.730
The client sends a random string as a pre-master secret using

00:03:58.730 --> 00:04:02.525
the public key that is decrypted by the server using the private key.

00:04:02.525 --> 00:04:05.420
At this point, both the client and server

00:04:05.420 --> 00:04:08.930
generates symmetric session keys using the client random,

00:04:08.930 --> 00:04:11.640
server random, and pre-master keys.

00:04:11.640 --> 00:04:15.585
Next up is Secure Shell or SSH.

00:04:15.585 --> 00:04:20.480
It is to Telnet what HTTPS is to HTTP.

00:04:20.480 --> 00:04:25.460
The initial handshake is similar to TLS with a version exchange, however,

00:04:25.460 --> 00:04:28.984
in opposition to TLS where a digital certificate is exchanged,

00:04:28.984 --> 00:04:33.085
at this point, a password is sent from the client to the server.

00:04:33.085 --> 00:04:38.060
Now, there is a key exchange with a list of preferred cryptographic techniques.

00:04:38.060 --> 00:04:41.180
Then either Diffie-Hellman or elliptical curves

00:04:41.180 --> 00:04:44.675
encryption is started to allow the exchange of private keys.

00:04:44.675 --> 00:04:47.000
Once private keys have been exchanged,

00:04:47.000 --> 00:04:49.415
symmetric encryption is established.

00:04:49.415 --> 00:04:54.545
Now, we're going to turn our attention to SFTP and FTPS,

00:04:54.545 --> 00:05:01.115
that's Secure File Transfer Protocol and File Transfer Protocol over SSL respectively.

00:05:01.115 --> 00:05:04.280
While we're lumping them together based on what they accomplish,

00:05:04.280 --> 00:05:05.975
they're actually quite different.

00:05:05.975 --> 00:05:09.845
SFTP authenticates the same as SSH,

00:05:09.845 --> 00:05:11.185
which we just learned about.

00:05:11.185 --> 00:05:16.940
FTPS uses the TLS encryption method we learned about in the HTTPS section.

00:05:16.940 --> 00:05:20.120
We're closing this section out with RDP,

00:05:20.120 --> 00:05:24.185
Remote Desktop Protocol, which is how we connect to our Windows machines.

00:05:24.185 --> 00:05:28.170
The initial exchange is an x.224 PDU,

00:05:28.170 --> 00:05:30.140
that's Protocol Data Unit,

00:05:30.140 --> 00:05:34.744
which basically tells the server what security protocols the client supports.

00:05:34.744 --> 00:05:41.040
Those protocols are typically RC4 for standard RDP or TLS for enhanced security.

00:05:41.040 --> 00:05:46.835
The next two exchanges focus on details for channels used and encryption methods, etc.

00:05:46.835 --> 00:05:51.365
Now the client sends a randomized string encrypted with the server's public key.

00:05:51.365 --> 00:05:55.320
It is at this point, subsequent traffic is encrypted.

